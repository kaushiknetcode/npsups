// 7th CPC Pay Matrix (Complete)
let payMatrix = {
    "1": {
        1: 18000, 2: 18500, 3: 19100, 4: 19700, 5: 20300,
        6: 20900, 7: 21500, 8: 22100, 9: 22800, 10: 23500,
        11: 24200, 12: 24900, 13: 25600, 14: 26400, 15: 27200,
        16: 28000, 17: 28800, 18: 29700, 19: 30600, 20: 31500,
        21: 32400, 22: 33400, 23: 34400, 24: 35400, 25: 36500,
        26: 37600, 27: 38700, 28: 39900, 29: 41100, 30: 42300,
        31: 43600, 32: 44900, 33: 46200, 34: 47600, 35: 49000,
        36: 50500, 37: 52000, 38: 53600, 39: 55200, 40: 56900
    },
    "2": {
        1: 19900, 2: 20500, 3: 21100, 4: 21700, 5: 22400,
        6: 23100, 7: 23800, 8: 24500, 9: 25200, 10: 26000,
        11: 26800, 12: 27600, 13: 28400, 14: 29300, 15: 30200,
        16: 31100, 17: 32000, 18: 32900, 19: 33900, 20: 35000,
        21: 36000, 22: 37100, 23: 38200, 24: 39300, 25: 40500,
        26: 41700, 27: 43000, 28: 44300, 29: 45600, 30: 47000,
        31: 48400, 32: 49900, 33: 51400, 34: 52900, 35: 54500,
        36: 56100, 37: 57800, 38: 59500, 39: 61300, 40: 63100
    },
    "3": {
        1: 21700, 2: 22400, 3: 23100, 4: 23800, 5: 24500,
        6: 25200, 7: 26000, 8: 26800, 9: 27600, 10: 28400,
        11: 29300, 12: 30200, 13: 31100, 14: 32000, 15: 33000,
        16: 34000, 17: 35000, 18: 36000, 19: 37100, 20: 38200,
        21: 39300, 22: 40500, 23: 41700, 24: 43000, 25: 44300,
        26: 45600, 27: 47000, 28: 48400, 29: 49900, 30: 51400,
        31: 52900, 32: 54500, 33: 56100, 34: 57800, 35: 59500,
        36: 61300, 37: 63100, 38: 65000, 39: 67000, 40: 69000
    },
    "4": {
        1: 25500, 2: 26300, 3: 27100, 4: 27900, 5: 28700,
        6: 29600, 7: 30500, 8: 31400, 9: 32300, 10: 33300,
        11: 34300, 12: 35300, 13: 36400, 14: 37500, 15: 38600,
        16: 39800, 17: 41000, 18: 42200, 19: 43500, 20: 44800,
        21: 46100, 22: 47500, 23: 48900, 24: 50400, 25: 51900,
        26: 53500, 27: 55100, 28: 56800, 29: 58500, 30: 60300,
        31: 62100, 32: 64000, 33: 65900, 34: 67900, 35: 69900,
        36: 72000, 37: 74200, 38: 76400, 39: 78700, 40: 81100
    },
    "5": {
        1: 29200, 2: 30100, 3: 31000, 4: 31900, 5: 32900,
        6: 33900, 7: 34900, 8: 35900, 9: 37000, 10: 38100,
        11: 39200, 12: 40400, 13: 41600, 14: 42800, 15: 44100,
        16: 45400, 17: 46800, 18: 48200, 19: 49600, 20: 51100,
        21: 52600, 22: 54200, 23: 55800, 24: 57500, 25: 59300,
        26: 61100, 27: 62900, 28: 64800, 29: 66700, 30: 68700,
        31: 70800, 32: 72900, 33: 75100, 34: 77400, 35: 79700,
        36: 82100, 37: 84600, 38: 87100, 39: 89700, 40: 92400
    },
    "6": {
        1: 35400, 2: 36500, 3: 37600, 4: 38700, 5: 39900,
        6: 41100, 7: 42300, 8: 43600, 9: 44900, 10: 46200,
        11: 47600, 12: 49000, 13: 50500, 14: 52000, 15: 53600,
        16: 55200, 17: 56900, 18: 58600, 19: 60400, 20: 62200,
        21: 64100, 22: 66000, 23: 68000, 24: 70000, 25: 72100,
        26: 74300, 27: 76500, 28: 78800, 29: 81200, 30: 83600,
        31: 86100, 32: 88700, 33: 91400, 34: 94100, 35: 96900,
        36: 99800, 37: 102800, 38: 105900, 39: 109100, 40: 112400
    },
    "7": {
        1: 44900, 2: 46200, 3: 47600, 4: 49000, 5: 50500,
        6: 52000, 7: 53600, 8: 55200, 9: 56900, 10: 58600,
        11: 60400, 12: 62200, 13: 64100, 14: 66000, 15: 68000,
        16: 70000, 17: 72100, 18: 74300, 19: 76500, 20: 78800,
        21: 81200, 22: 83600, 23: 86100, 24: 88700, 25: 91400,
        26: 94100, 27: 96900, 28: 99800, 29: 102800, 30: 105900,
        31: 109100, 32: 112400, 33: 115800, 34: 119300, 35: 122900,
        36: 126600, 37: 130400, 38: 134300, 39: 138300, 40: 142400
    },
    "8": {
        1: 47600, 2: 49000, 3: 50500, 4: 52000, 5: 53600,
        6: 55200, 7: 56900, 8: 58600, 9: 60400, 10: 62200,
        11: 64100, 12: 66000, 13: 68000, 14: 70000, 15: 72100,
        16: 74300, 17: 76500, 18: 78800, 19: 81200, 20: 83600,
        21: 86100, 22: 88700, 23: 91400, 24: 94100, 25: 96900,
        26: 99800, 27: 102800, 28: 105900, 29: 109100, 30: 112400,
        31: 115800, 32: 119300, 33: 122900, 34: 126600, 35: 130400,
        36: 134300, 37: 138300, 38: 142400, 39: 146700, 40: 151100
    },
    "9": {
        1: 53100, 2: 54700, 3: 56300, 4: 58000, 5: 59700,
        6: 61500, 7: 63400, 8: 65300, 9: 67300, 10: 69300,
        11: 71400, 12: 73500, 13: 75700, 14: 78000, 15: 80300,
        16: 82700, 17: 85200, 18: 87800, 19: 90400, 20: 93100,
        21: 95900, 22: 98800, 23: 101800, 24: 104900, 25: 108100,
        26: 111300, 27: 114600, 28: 118000, 29: 121500, 30: 125100,
        31: 128900, 32: 132800, 33: 136800, 34: 140900, 35: 145100,
        36: 149500, 37: 154000, 38: 158600, 39: 163400, 40: 168300
    },
    "10": {
        1: 56100, 2: 57800, 3: 59500, 4: 61300, 5: 63100,
        6: 65000, 7: 67000, 8: 69000, 9: 71100, 10: 73200,
        11: 75400, 12: 77700, 13: 80000, 14: 82400, 15: 84900,
        16: 87400, 17: 90000, 18: 92700, 19: 95500, 20: 98400,
        21: 101400, 22: 104400, 23: 107500, 24: 110700, 25: 114000,
        26: 117400, 27: 120900, 28: 124500, 29: 128200, 30: 132000,
        31: 136000, 32: 140100, 33: 144300, 34: 148600, 35: 153100,
        36: 157700, 37: 162400, 38: 167300, 39: 172300, 40: 177500
    },
    "11": {
        1: 67700, 2: 69700, 3: 71800, 4: 74000, 5: 76200,
        6: 78500, 7: 80900, 8: 83300, 9: 85800, 10: 88400,
        11: 91100, 12: 93800, 13: 96600, 14: 99500, 15: 102500,
        16: 105600, 17: 108800, 18: 112100, 19: 115500, 20: 119000,
        21: 122600, 22: 126300, 23: 130100, 24: 134000, 25: 138000,
        26: 142100, 27: 146400, 28: 150800, 29: 155300, 30: 160000,
        31: 164800, 32: 169700, 33: 174800, 34: 180000, 35: 185400,
        36: 191000, 37: 196700, 38: 202600, 39: 208700
    },
    "12": {
        1: 78800, 2: 81200, 3: 83600, 4: 86100, 5: 88700,
        6: 91400, 7: 94100, 8: 96900, 9: 99800, 10: 102800,
        11: 105900, 12: 109100, 13: 112400, 14: 115800, 15: 119300,
        16: 122900, 17: 126600, 18: 130400, 19: 134300, 20: 138300,
        21: 142400, 22: 146700, 23: 151100, 24: 155600, 25: 160300,
        26: 165100, 27: 170100, 28: 175200, 29: 180500, 30: 185900,
        31: 191500, 32: 197200, 33: 203100, 34: 209200
    },
    "13": {
        1: 123100, 2: 126800, 3: 130600, 4: 134500, 5: 138500,
        6: 142700, 7: 147000, 8: 151400, 9: 155900, 10: 160600,
        11: 165400, 12: 170400, 13: 175500, 14: 180800, 15: 186200,
        16: 191800, 17: 197600, 18: 203500, 19: 209600, 20: 215900
    },
    
    // Level 13A
    "13A": {
        1: 131100, 2: 135000, 3: 139100, 4: 143300, 5: 147600,
        6: 152000, 7: 156600, 8: 161300, 9: 166100, 10: 171100,
        11: 176200, 12: 181500, 13: 186900, 14: 192500, 15: 198300,
        16: 204200, 17: 210300, 18: 216600
    },
    "14": {
        1: 144200, 2: 148500, 3: 153000, 4: 157600, 5: 162300,
        6: 167200, 7: 172200, 8: 177400, 9: 182700, 10: 188200,
        11: 193800, 12: 199600, 13: 205600, 14: 211800, 15: 218200
    },
    // Note: Levels 15-18 are typically for higher administrative grades
    "15": {
        1: 182200, 2: 187700, 3: 193300, 4: 199100, 5: 205100,
        6: 211300, 7: 217600, 8: 224100
    },
    "16": {
        1: 205400, 2: 211600, 3: 217900, 4: 224400
    },
    "17": {
        1: 225000
    },
    "18": {
        1: 250000
    }
    // Levels 13-18 would follow the same pattern
    // ...
};

// Pay levels for dropdown - includes all levels from 1-18 plus 13A
const payLevels = [...Array(18).keys()]
    .map(i => (i + 1).toString())
    .filter(level => level !== '13')  // Remove 13 as we'll add it back with 13A
    .concat(['13', '13A'])            // Add 13 and 13A together
    .sort((a, b) => {
        // Convert to numbers for comparison, treating '13A' as 13.5
        const numA = a === '13A' ? 13.5 : parseFloat(a);
        const numB = b === '13A' ? 13.5 : parseFloat(b);
        return numA - numB;
    });

// Pay indices for dropdown (1-40)
const payIndices = Array.from({length: 40}, (_, i) => i + 1);

// Function to get basic pay
function getBasicPay(level, index) {
    if (payMatrix[level] && payMatrix[level][index]) {
        return payMatrix[level][index];
    }
    return 0;
}

// Function to get all indices for a specific level
function getIndicesForLevel(level) {
    if (payMatrix[level]) {
        return Object.keys(payMatrix[level]).map(Number).sort((a, b) => a - b);
    }
    return [];
}

// Function to apply CPC update (double all pay values)
function applyCPC() {
    const newMatrix = {};
    
    // Double all values in the matrix
    Object.keys(payMatrix).forEach(level => {
        newMatrix[level] = {};
        Object.keys(payMatrix[level]).forEach(index => {
            newMatrix[level][index] = Math.round(payMatrix[level][index] * 2);
        });
    });
    
    // Update the matrix
    payMatrix = newMatrix;
    
    return payMatrix;
}

export { 
    payMatrix, 
    payLevels, 
    payIndices, 
    getBasicPay, 
    getIndicesForLevel,
    applyCPC 
};